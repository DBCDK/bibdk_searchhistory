<?php

/**
 * @file
 * Tets class intented to act as simpletest for the bibdk_searchhistory module
 */

class BibdkSearchHistoryTestCase extends DrupalWebTestCase {

  /**
   *Info for this test case
   */
  public function getInfo(){
    return array(
      'name' => 'Bibdk Search History functionality',
      'description' => t('Test the functionality of Bibdk Search History'),
      'group' => 'AAA',
    );
  }

  public function setUp() {
    //$this->profile = 'bibdk';
//    parent::setUp(array('ding_user', 'profile2', 'ding_provider', 'bibdk_test_provider', 'bibdk_searchhistory'));

    $this->profile = 'minimal';
    parent::setUp('ting_openformat', 'bibdk_searchhistory', 'ding_provider', 'bibdk_provider'); //, 'bibdk_webservice');
    variable_set('ting_search_url', 'http://lakiseks.dbc.dk/openbibdk/0.5/');
    variable_set('bibdk_provider_webservice_url', 'http://guesstimate.dbc.dk/~svi/openuserinfo/server.php');
    variable_set('bibdk_provider_security_code', 'testhest');

  }

  public function testRunner(){
   //$this->_testCheckProfileTypeDelete();
  $this->_testAddSearchHistoryToWebservice();

  }


  private function _testAddSearchHistoryToWebservice(){
    $this->_createProviderUser();
    $user = new stdClass();
    $user->uid = 2;
    $user->name = 'pjohans@gmail.com';
    ding_user_save_creds(array('creds' => array(
      'name' => 'pjohans@gmail.com',
      'pass' => '1111',
    )), $user);

    $element = array(
      'searchHistoryString' => 'test string',
      'searchHistoryTime' => 'testTime',
      'searchHistoryCount' => 1234
    );

    // Test add searchhistory element
    $result = _bibdk_searchhistory_add_element_webservice($element, $user);
    $this->assertTrue(is_numeric($result), t('@result is numeric', array('@result' => $result)));

    // Test add searchhistory element id is incrementing
    $result2 = _bibdk_searchhistory_add_element_webservice($element, $user);
    $this->assertTrue(($result2-$result) == 1, t('@res2 is incremented 1 from @res1', array('@res1' => $result, '@res2' => $result2)));

    //Test searchHistory list is returned
    $list =_bibdk_searchhistory_get_elements_webservice($user);

    $this->assertTrue($list[$result] == array(
      'id' => $result,
      'string' => 'test string',
      'time' => 'testTime',
      'count' => 1234
    ), t('element with id: @result is on the list of search history results', array('@result' => $result)));

    // Test element is removed
    $element = array(
      'searchHistoryId' => $result,
    );
    $remove_result = _bibdk_searchhistory_remove_element_webservice($element, $user);
    $this->assertTrue($result == $remove_result);

    //Confirm element is removed
    $list =_bibdk_searchhistory_get_elements_webservice($user);

    $this->assertFalse(isset($list[$result]), t('element with id: @result is NOT on the list of search history results', array('@result' => $result)));

  }

  private function _createProviderUser() {
    db_insert('authmap')
      ->fields(array(
        'uid' => 2,
        'module' => 'ding_user',
        'authname' => 'pjohans@gmail.com',
      ))->execute();
  }
   // check if profiletype is deleted when module is disabled and created after module has been enabled
  // and user logs in.
  private function _testCheckProfileTypeDelete(){
    //first disable module
    module_disable(array('bibdk_searchhistory'));
    $profile_type = 'bibdk_search_history';
    $type = profile2_get_types($profile_type);
    // assert that profiletype does not exist
    $this->assertFalse($type);

    // enable module
    module_enable(array('bibdk_searchhistory'));
    // we have to submit the user_login_block form to log in as provider user
    $edit['name'] = 'hest@gmail.com';
    $edit['pass'] = 'hest';
    $this->drupalPost('user', $edit, 'Log in', array(), array(), 'user-login', NULL );

    // assert that the profiletype has been created
    $type = profile2_get_types($profile_type);
    $this->assertEqual($type->type,$profile_type);
  }


}
