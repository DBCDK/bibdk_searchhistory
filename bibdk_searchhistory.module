<?php
module_load_include('inc', 'bibdk_searchhistory', 'bibdk_searchhistory.mypage');
module_load_include('inc', 'bibdk_searchhistory', 'bibdk_searchhistory.form');
module_load_include('inc', 'bibdk_searchhistory', 'bibdk_searchhistory.block');
module_load_include('inc', 'bibdk_searchhistory', 'bibdk_searchhistory.webservice');

/**
 * @file
 * Adding support for saving and reuse of old searches
 */

/**
 * Impelements user_profile_tabs (
 * @see ding_user.module)
 * */
function bibdk_searchhistory_user_profile2_tabs() {
  $ret = new stdClass();
  $ret->label = t('searchhistory');
  $ret->form = 'bibdk_searchhistory_form';
  $ret->type = 'bibdk_search_history';

  return $ret;
}

/**
 * Implements hook_menu().
 * Sets up menu items.
 *
 */
function bibdk_searchhistory_menu() {
  $items = array();
  $items['bibdk_searchhistory/ajax/%/%'] = array(
    'page callback' => 'bibdk_searchhistory_action_link_callback',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/search/bibdk_searchhistory'] = array(
    'title' => 'Bibdk search history',
    'description' => 'Settings for display of search history',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bibdk_searchhistory_admin'),
    'access arguments' => array('administer bibdk search history settings'),
    'file' => 'includes/bibdk_searchhistory_settings.admin.inc',
  );
}

/**
 * Implements hook_permission().
 */
function bibdk_searchhistory_permission() {
  return array(
    'administer bibdk search history settings' => array(
      'title' => t('Administer search history settings'),
      'description' => t('Allow users to modify settings for search history'),
    ),
  );
}

/**
 * Implement hook_ctools_plugin_api().
 *
 */
function bibdk_searchhistory_ctools_plugin_api($module, $api) {
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array('version' => 1);
  }
}

/** Generates a view for each element in the search history
 * @param $element
 * @return array
 */
function _bibdk_searchhistory_element_view($element){
  $string = $element['string'];
  $count = $element['count'];
  $memolist = bibdk_searchhistory_action_link($element);
  return array(
    'search_string' => l($string, 'search/work/' . $string),
    'result_count' => $count,
    'memolist' => drupal_render($memolist),
  );
}

/** Create an add remove button for logged in users
 * @param $element
 * @return array
 */
function bibdk_searchhistory_action_link($element){
  static $c;
  $c++;
  $saved = isset($element['id']) ? true : false;
  $serial_element = urlencode(serialize($element));
  $render = array(
    '#type' => 'link',
    '#href' => '',
    '#title' => $saved  ? t('Remove') : t('Add'),
    '#options' => array(
      'attributes' => array(
        'element-id' => $c,
      ),
    ),
    '#ajax' => array(
      'path' => 'bibdk_searchhistory/ajax/'.$c.'/'.$serial_element,
    'callback' => 'bibdk_searchhistory_action_link_callback',
    ),
  );
  return $render;
}


/** Ajax callback : add/remove search history element from webservice
 * @param $count
 * @param $serial_element
 */
function bibdk_searchhistory_action_link_callback($count, $serial_element){
  $element = unserialize(urldecode($serial_element));
  if(!isset($element['id'])){
    $element = BibdkSearchHistory::addElementToWebservice($element);
    $link = bibdk_searchhistory_action_link($element);
    $commands[] = ajax_command_replace('[element-id='. $count . ']', drupal_render($link));
  }
  else{
    $result = BibdkSearchHistory::removeElementFromWebservice($element);
    $commands[] = bibdk_searchhistory_ajax_command('[element-id='. $count . ']');
  }

  $callback = array('#type' => 'ajax', '#commands' => $commands);
  ajax_deliver($callback);
}

/** Ajax command to remove element from dom
 * @param $selector
 * @return array
 */
function bibdk_searchhistory_ajax_command($selector) {
  return array(
    'command' => 'searchhistory_remove',
    'selector' => $selector,
  );
}

/** Generate views from searchhistory elements
 *
 * @param $elements
 * @return array
 */
function bibdk_searchhistory_get_views($elements){
  $views = array();
  foreach($elements as $element){
    $views[$element['string']] = _bibdk_searchhistory_element_view($element);
  }
  return $views;
}


/**
 * Called from ting_search when a search is being executed. Saves the search string and number of results in the $_SESSION variable
 *
 * @param String $keys - searchstring
 * @param int $searchsresult - result count
 */
function bibdk_searchhistory_set_search_results($keys, $searchsresult) {
  $element = array(
    'string' => $keys,
    'count' => isset($searchsresult->numTotalObjects) ? $searchsresult->numTotalObjects : 0,
    'timestamp' => time(),
  );
  BibdkSearchHistory::addElementToSession($element);
}


//TODO: Depricated -> BibdkSearchHistoryClass
function _bibdk_searchhistory_remove_from_session($string) {
  if (array_key_exists($string, $_SESSION['searches'])) {
    unset($_SESSION['searches'][$string]);
  }
}
