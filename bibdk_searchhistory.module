<?php

/**
 * @file
 * Adding support for saving and reuse old searches
 */

/**
 * Implements hook_block_info();
 */
function bibdk_searchhistory_block_info() {
  $blocks['bibdk_search_history'] = array(
    'info' => t('Bibdk search history'),
    'Description' => t('Displaying the current users search history'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_boot() 
 */
function bibdk_searchhistory_boot(){
  if(!$_SESSION){
    global $user;
    $user-session;
    $_SESSION['searches'] = array();
  }
}

/**
 * Implements hook_block_configure();
 */
function bibdk_searchhistory_block_configure($delta) {
  $form = array();
  switch ($delta) {
    case 'bibdk_search_history':
      /* //TODO add pager to table and the ability to change number of results on each page in config
        $form['search_history_count'] = array(
        '#type' => 'textfield',
        '#title' => t('Number of results shown on each page'),
        '#size' => 5,
        '#description' => t('Enter the number of search results shown to the user on each page - 0 = unlimited'),
        '#default_value' => variable_get('search_history_count', 0),
        );
       * 
       */
      $form['search_history_save_limit'] = array(
        '#type' => 'textfield',
        '#title' => t('Highest number of saved searches'),
        '#size' => 5,
        '#description' => t('Number of saved searches. When exceeded will the oldest unsaved searches be deleted - 0 = unlimited'),
        '#default_value' => variable_get('search_history_save_limit', 50),
      );
      break;
  }

  return $form;
}

/**
 * Implements hook_block_save(). 
 */
function bibdk_searchhistory_block_save($delta = '', $edit = array()) {
  switch ($delta) {
    case 'bibdk_search_history':
      #variable_set('search_history_count', (int) abs($edit['search_history_count']));
      variable_set('search_history_save_limit', (int) abs($edit['search_history_save_limit']));
      break;
  }

  return;
}

/**
 * Implements hook_block_view();
 */
function bibdk_searchhistory_block_view($delta = '') {
  switch ($delta) {
    case 'bibdk_search_history':
      $block['subject'] = t('Search history');
      $block['content'] = drupal_get_form('bibdk_searchhistory_get_form');
      return $block;
      break;
  }
}

/**
 * Create the tableselect form with searchresults
 * @param type $form
 * @return array $form
 */
function bibdk_searchhistory_get_form($form) {
  if (!_bibdk_searchhistory_check_session())
    return;

  $session_history = array();
  $savedseraches = array();

  if (count($_SESSION['searches']) >= 0) {
    $searches = $_SESSION['searches'];
    foreach ($searches as $key => $value) {
      $link = 'search/ting/' . $key;
      $session_history[$key] = array(
        'search_string' => l($key, $link),
        'result_count' => $value,
      );
    }
  }

  $header = array(
    'search_string' => t('Search string'),
    'result_count' => t('Result count'),
  );


  $form['bibdk_searchhistory_form']['bibdk_search_history_table'] = array(
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $session_history,
    '#empty' => t('No searches executed yet'),
    '#js_select' => TRUE,
    '#multiple' => TRUE,
    '#default_value' => $session_history,
  );


  $form['bibdk_searchhistory_form']['bibdk_search_history_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save selected'),
  );

  $form['bibdk_searchhistory_form']['bibdk_search_history_clear'] = array(
    '#type' => 'submit',
    '#value' => t('Clear history'),
  );

  return $form;
}


/**
 * Deprecated
 * @param array $variables
 * @return type 
 */
/*
function bibdk_searchresults_theme_tableselect($variables) {
  $element = $variables['element'];

  $rows = array();
  $header = $element['#header'];
  if (!empty($element['#options'])) {
    $options = $element['#options'];
    // Generate a table row for each selectable item in #options.
    foreach ($options as $key => $value) {
      $row = array();

      $row['data'] = array();
      if (isset($element['#options'][$key]['#attributes'])) {
        $row += $element['#options'][$key]['#attributes'];
      }

      // As theme_table only maps header and row columns by order, create the
      // correct order by iterating over the header fields.
      foreach ($element['#header'] as $fieldname => $title) {
        $row['data'][] = $element['#options'][$key][$fieldname];
      }

      // Render the checkbox / radio element.
      #$row['data'][] = drupal_render($options[$key]);

      $row['data'][] = theme_checkbox($variables = array(
        'element' => array(
          '#title' => 'some title',
          )));
      $rows[] = $row;
    }
    // Add an empty header or a "Select all" checkbox to provide room for the
    // checkboxes/radios in the first table column.
    if ($element['#js_select']) {
      // Add a "Select all" checkbox.
      drupal_add_js('misc/tableselect.js');
      array_push($header, array('data' => t('Select all'), 'class' => array('select-all')));
      dpm($header);
    }
    else {
      // Add an empty header when radio buttons are displayed or a "Select all"
      // checkbox is not desired.
      array_unshift($header, '');
    }
  }
  return theme('table', array('header' => $header, 'rows' => $rows, 'empty' => $element['#empty']));
}
 * 
 */

/**
 * Called from ting_search when a search is being executed. Saves the search string and number of results in the $_SESSION variable
 * @param String $keys - searchstring
 * @param int $searchsresult - result count
 */
function bibdk_searchhistory_set_search_results($keys, $searchsresult) {

  if (!_bibdk_searchhistory_check_session()) {
    return;
  }

  $limit = (int) variable_get('search_history_save_limit');
  if (count($_SESSION['searches']) >= $limit && !array_key_exists($keys, $_SESSION['searches'])) {
    array_shift($_SESSION['searches']);
  }

  $_SESSION['searches'][$keys] = _bibdk_searchhistory_check_searchresult($searchsresult);
}

/**
 * Helper function to check if the $_SESSION is available.
 * @return boolean 
 */
function _bibdk_searchhistory_check_session() {
  if (!isset($_SESSION)) {
    watchdog('bibdk searchhistory', 'No $_SESSION available - returning false. No search result stored');
    return FALSE;
  }
  else if (!array_key_exists('searches', $_SESSION)) {
    $_SESSION['searches'] = array();
  }
  return TRUE;
}

/**
 * Helper function to check if any results is returnes
 * @param ting_object$searchsresult
 * @return int $count 
 */
function _bibdk_searchhistory_check_searchresult($searchsresult) {
  $count = 0;
  if ($searchsresult) {
    $count = $searchsresult->numTotalObjects;
  }
  return $count;
}